import { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  Avatar,
  Container,
  Button,
  Chip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Paper,
  Divider,
} from '@mui/material';
import {
  PersonAdd,
  AdminPanelSettings,
  Person,
  Edit as EditIcon,
  Save as SaveIcon,
  DragIndicator as DragIcon,
  Favorite as FavoriteIcon,
} from '@mui/icons-material';
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
} from '@dnd-kit/core';
import type { DragEndEvent } from '@dnd-kit/core';
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
  useSortable,
} from '@dnd-kit/sortable';
import {
  CSS,
} from '@dnd-kit/utilities';
import { useNavigate } from 'react-router-dom';
import { useApp } from '../context/AppContext';
import type { User } from '../types';

// 可拖拽的用户卡片组件
interface SortableUserCardProps {
  user: User;
  isSelected: boolean;
  onSelect: (user: User) => void;
  onEdit: (user: User) => void;
  getUserAvatarColor: (userId: string) => string;
  getRoleColor: (role: string) => string;
  getRoleIcon: (role: string) => React.ReactNode;
}

function SortableUserCard({ 
  user, 
  isSelected, 
  onSelect, 
  onEdit, 
  getUserAvatarColor, 
  getRoleColor, 
  getRoleIcon 
}: SortableUserCardProps) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ id: user.id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
  };

  return (
    <Box ref={setNodeRef} style={style}>
      <Card
        sx={{
          cursor: 'pointer',
          transition: 'all 0.3s ease',
          transform: isSelected ? 'scale(1.05)' : 'scale(1)',
          boxShadow: isSelected 
            ? '0 8px 25px rgba(76, 175, 80, 0.3)' 
            : '0 2px 8px rgba(0,0,0,0.1)',
          border: isSelected 
            ? '3px solid' 
            : '3px solid transparent',
          borderColor: isSelected 
            ? 'primary.main' 
            : 'transparent',
          '&:hover': {
            transform: 'scale(1.02)',
            boxShadow: '0 6px 20px rgba(76, 175, 80, 0.2)',
          },
          position: 'relative',
        }}
        onClick={() => onSelect(user)}
      >
        {/* 拖拽手柄 */}
        <IconButton
          {...attributes}
          {...listeners}
          size="small"
          sx={{
            position: 'absolute',
            top: 8,
            left: 8,
            bgcolor: 'rgba(255, 255, 255, 0.9)',
            '&:hover': {
              bgcolor: 'rgba(255, 255, 255, 1)',
            },
          }}
        >
          <DragIcon fontSize="small" />
        </IconButton>

        {/* 编辑按钮 */}
        <IconButton
          size="small"
          sx={{
            position: 'absolute',
            top: 8,
            right: 8,
            bgcolor: 'rgba(255, 255, 255, 0.9)',
            '&:hover': {
              bgcolor: 'rgba(255, 255, 255, 1)',
            },
          }}
          onClick={(e) => {
            e.stopPropagation();
            onEdit(user);
          }}
        >
          <EditIcon fontSize="small" />
        </IconButton>

        <CardContent sx={{ textAlign: 'center', p: 3 }}>
          {/* 头像 */}
          <Avatar
            src={user.avatar}
            sx={{
              width: 80,
              height: 80,
              mx: 'auto',
              mb: 2,
              fontSize: 32,
              bgcolor: isSelected 
                ? 'primary.main' 
                : getUserAvatarColor(user.id),
              color: 'white',
              boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
            }}
          >
            {user.name.charAt(0)}
          </Avatar>
          
          {/* 用户名 */}
          <Typography 
            variant="h6" 
            gutterBottom
            sx={{ 
              fontWeight: 600,
              color: isSelected 
                ? 'primary.main' 
                : 'text.primary',
            }}
          >
            {user.name}
          </Typography>

          {/* 角色标签 */}
          <Chip
            icon={getRoleIcon(user.role)}
            label={user.role === 'admin' ? '管理员' : '成员'}
            size="small"
            sx={{
              bgcolor: getRoleColor(user.role),
              color: 'white',
              fontWeight: 500,
              '& .MuiChip-icon': {
                color: 'white',
              },
            }}
          />
        </CardContent>
      </Card>
    </Box>
  );
}

export function UserSelectionPage() {
  const navigate = useNavigate();
  const { state, dispatch } = useApp();
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [editingUser, setEditingUser] = useState<User | null>(null);
  const [editedName, setEditedName] = useState('');
  const [users, setUsers] = useState<User[]>(state.users);

  // 拖拽传感器
  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  // 处理拖拽结束
  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;

    if (over && active.id !== over.id) {
      const oldIndex = users.findIndex((user) => user.id === active.id);
      const newIndex = users.findIndex((user) => user.id === over.id);
      
      const newUsers = arrayMove(users, oldIndex, newIndex);
      setUsers(newUsers);
      saveUsersToStorage(newUsers);
    }
  };

  // 初始化时从本地存储加载用户数据
  useEffect(() => {
    const savedUsers = localStorage.getItem('customUsers');
    if (savedUsers) {
      try {
        const parsedUsers = JSON.parse(savedUsers);
        setUsers(parsedUsers);
        // 同时更新全局状态
        dispatch({ type: 'SET_USERS', payload: parsedUsers });
      } catch (error) {
        console.error('加载用户数据失败:', error);
      }
    }
  }, [dispatch]);

  // 保存用户数据到本地存储
  const saveUsersToStorage = (updatedUsers: User[]) => {
    localStorage.setItem('customUsers', JSON.stringify(updatedUsers));
    setUsers(updatedUsers);
    // 更新全局状态
    dispatch({ type: 'SET_USERS', payload: updatedUsers });
  };

  // 开始编辑用户姓名
  const handleEditUser = (user: User) => {
    setEditingUser(user);
    setEditedName(user.name);
    setEditDialogOpen(true);
  };

  // 保存编辑的用户姓名
  const handleSaveUserName = () => {
    if (editingUser && editedName.trim()) {
      const updatedUsers = users.map(user => 
        user.id === editingUser.id 
          ? { ...user, name: editedName.trim() }
          : user
      );
      
      saveUsersToStorage(updatedUsers);
      
      // 如果当前选中的用户是被编辑的用户，更新选中状态
      if (selectedUser?.id === editingUser.id) {
        setSelectedUser({ ...editingUser, name: editedName.trim() });
      }
      
      setEditDialogOpen(false);
      setEditingUser(null);
      setEditedName('');
    }
  };

  // 取消编辑
  const handleCancelEdit = () => {
    setEditDialogOpen(false);
    setEditingUser(null);
    setEditedName('');
  };

  // 保存用户选择到本地存储
  const handleConfirmUser = () => {
    if (selectedUser) {
      // 保存到本地存储
      localStorage.setItem('selectedUserId', selectedUser.id);
      
      // 更新全局状态
      dispatch({ type: 'SET_CURRENT_USER', payload: selectedUser });
      
      // 跳转到首页
      navigate('/');
    }
  };

  // 获取用户头像背景色
  const getUserAvatarColor = (userId: string) => {
    const colors = [
      '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57',
      '#FF9FF3', '#54A0FF', '#5F27CD', '#00D2D3', '#FF9F43'
    ];
    const index = userId.charCodeAt(userId.length - 1) % colors.length;
    return colors[index];
  };
  const getRoleIcon = (role: string) => {
    switch (role) {
      case 'admin':
        return <AdminPanelSettings sx={{ fontSize: 20 }} />;
      case 'member':
        return <Person sx={{ fontSize: 20 }} />;
      default:
        return <Person sx={{ fontSize: 20 }} />;
    }
  };

  // 获取角色名称
  const getRoleName = (role: string) => {
    switch (role) {
      case 'admin':
        return '管理员';
      case 'member':
        return '成员';
      default:
        return '成员';
    }
  };

  // 获取角色颜色
  const getRoleColor = (role: string) => {
    switch (role) {
      case 'admin':
        return 'error' as const;
      case 'member':
        return 'primary' as const;
      default:
        return 'default' as const;
    }
  };

  return (
    <Box sx={{ minHeight: '100vh', py: 4 }}>
      <Container maxWidth="lg">
        {/* 欢迎标题 */}
        <Box textAlign="center" mb={4}>
          <PersonAdd 
            sx={{ 
              fontSize: 80, 
              color: 'primary.main', 
              mb: 2,
              filter: 'drop-shadow(0 4px 8px rgba(76, 175, 80, 0.3))'
            }} 
          />
          <Typography 
            variant="h4" 
            gutterBottom 
            sx={{ 
              fontWeight: 700, 
              color: 'primary.dark',
              textShadow: '2px 2px 4px rgba(0,0,0,0.1)'
            }}
          >
            🌱 欢迎来到乡村硅谷
          </Typography>
          <Typography 
            variant="h6" 
            color="text.secondary"
            sx={{ mb: 3 }}
          >
            请选择您的身份角色
          </Typography>
        </Box>

        {/* 分组标题和用户选择 */}
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
          {/* 第一组：乡村硅谷工作团队 */}
          <Paper sx={{ p: 3, borderRadius: 3, boxShadow: '0 4px 20px rgba(0,0,0,0.1)' }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
              <PersonAdd sx={{ fontSize: 32, color: 'primary.main', mr: 2 }} />
              <Typography 
                variant="h5" 
                sx={{ 
                  fontWeight: 700, 
                  color: 'primary.main',
                  textShadow: '1px 1px 2px rgba(0,0,0,0.1)'
                }}
              >
                🏢 乡村硅谷工作团队
              </Typography>
            </Box>
            
            <DndContext 
              sensors={sensors}
              collisionDetection={closestCenter}
              onDragEnd={handleDragEnd}
            >
              <SortableContext 
                items={users.map(user => user.id)}
                strategy={verticalListSortingStrategy}
              >
                <Box 
                  sx={{ 
                    display: 'grid',
                    gridTemplateColumns: {
                      xs: '1fr',
                      sm: 'repeat(2, 1fr)',
                      md: 'repeat(3, 1fr)',
                      lg: 'repeat(4, 1fr)'
                    },
                    gap: 3,
                  }}
                >
                  {users.map((user) => (
                    <SortableUserCard
                      key={user.id}
                      user={user}
                      isSelected={selectedUser?.id === user.id}
                      onSelect={setSelectedUser}
                      onEdit={handleEditUser}
                      getUserAvatarColor={getUserAvatarColor}
                      getRoleColor={getRoleColor}
                      getRoleIcon={getRoleIcon}
                    />
                  ))}
                </Box>
              </SortableContext>
            </DndContext>
          </Paper>

          {/* 第二组：硅谷甜蜜情侣组 */}
          <Paper sx={{ p: 3, borderRadius: 3, boxShadow: '0 4px 20px rgba(255,182,193,0.2)', border: '2px solid #FFB6C1' }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
              <FavoriteIcon sx={{ fontSize: 32, color: '#FF69B4', mr: 2 }} />
              <Typography 
                variant="h5" 
                sx={{ 
                  fontWeight: 700, 
                  background: 'linear-gradient(45deg, #FF69B4 30%, #FF1493 90%)',
                  backgroundClip: 'text',
                  WebkitBackgroundClip: 'text',
                  WebkitTextFillColor: 'transparent',
                  textShadow: '1px 1px 2px rgba(0,0,0,0.1)'
                }}
              >
                💕 硅谷甜蜜情侣组
              </Typography>
            </Box>
            
            <Box 
              sx={{ 
                display: 'grid',
                gridTemplateColumns: {
                  xs: '1fr',
                  sm: 'repeat(2, 1fr)',
                },
                gap: 3,
                justifyItems: 'center'
              }}
            >
              {/* 情侣组成员卡片 - 可以在这里添加特殊的情侣用户 */}
              <Card
                sx={{
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  background: 'linear-gradient(135deg, #FFB6C1 0%, #FFC0CB 100%)',
                  '&:hover': {
                    transform: 'scale(1.05)',
                    boxShadow: '0 8px 25px rgba(255,105,180,0.3)',
                  },
                  border: '2px solid #FF69B4',
                  minWidth: 250,
                }}
              >
                <CardContent sx={{ textAlign: 'center', p: 3 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
                    <Avatar
                      sx={{
                        width: 60,
                        height: 60,
                        bgcolor: '#FF69B4',
                        color: 'white',
                        fontSize: 24,
                        mr: 1,
                      }}
                    >
                      💑
                    </Avatar>
                    <Avatar
                      sx={{
                        width: 60,
                        height: 60,
                        bgcolor: '#FF1493',
                        color: 'white',
                        fontSize: 24,
                        ml: 1,
                      }}
                    >
                      👫
                    </Avatar>
                  </Box>
                  
                  <Typography 
                    variant="h6" 
                    gutterBottom
                    sx={{ 
                      fontWeight: 600,
                      color: '#8B0000',
                    }}
                  >
                    甜蜜情侣档
                  </Typography>
                  
                  <Typography 
                    variant="body2" 
                    color="text.secondary"
                    sx={{ mb: 2 }}
                  >
                    💌 即将开放情侣模式
                  </Typography>

                  <Chip
                    icon={<FavoriteIcon />}
                    label="敬请期待"
                    size="small"
                    sx={{
                      bgcolor: '#FF69B4',
                      color: 'white',
                      fontWeight: 500,
                      '& .MuiChip-icon': {
                        color: 'white',
                      },
                    }}
                  />
                </CardContent>
              </Card>
              
              <Box sx={{ 
                display: 'flex', 
                flexDirection: 'column', 
                justifyContent: 'center', 
                alignItems: 'center',
                p: 3,
                textAlign: 'center'
              }}>
                <FavoriteIcon sx={{ fontSize: 48, color: '#FF69B4', mb: 2 }} />
                <Typography variant="h6" sx={{ color: '#FF69B4', fontWeight: 600, mb: 1 }}>
                  爱情专区
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                  为情侣用户打造的专属功能区域
                </Typography>
                <Box sx={{ 
                  display: 'flex', 
                  flexWrap: 'wrap', 
                  gap: 1, 
                  justifyContent: 'center' 
                }}>
                  <Chip label="情侣任务" size="small" variant="outlined" color="secondary" />
                  <Chip label="甜蜜打卡" size="small" variant="outlined" color="secondary" />
                  <Chip label="爱情日历" size="small" variant="outlined" color="secondary" />
                </Box>
              </Box>
            </Box>
          </Paper>
        </Box>

        <Divider sx={{ my: 4 }} />
          {users.map((user) => (
            <Box key={user.id}>
              <Card
                sx={{
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  transform: selectedUser?.id === user.id ? 'scale(1.05)' : 'scale(1)',
                  boxShadow: selectedUser?.id === user.id 
                    ? '0 8px 25px rgba(76, 175, 80, 0.3)' 
                    : '0 2px 8px rgba(0,0,0,0.1)',
                  border: selectedUser?.id === user.id 
                    ? '3px solid' 
                    : '3px solid transparent',
                  borderColor: selectedUser?.id === user.id 
                    ? 'primary.main' 
                    : 'transparent',
                  '&:hover': {
                    transform: 'scale(1.02)',
                    boxShadow: '0 6px 20px rgba(76, 175, 80, 0.2)',
                  },
                  position: 'relative',
                }}
                onClick={() => setSelectedUser(user)}
              >
                {/* 编辑按钮 */}
                <IconButton
                  size="small"
                  sx={{
                    position: 'absolute',
                    top: 8,
                    right: 8,
                    bgcolor: 'rgba(255, 255, 255, 0.9)',
                    '&:hover': {
                      bgcolor: 'rgba(255, 255, 255, 1)',
                    },
                  }}
                  onClick={(e) => {
                    e.stopPropagation();
                    handleEditUser(user);
                  }}
                >
                  <EditIcon fontSize="small" />
                </IconButton>

                <CardContent sx={{ textAlign: 'center', p: 3 }}>
                  {/* 头像 */}
                  <Avatar
                    src={user.avatar}
                    sx={{
                      width: 80,
                      height: 80,
                      mx: 'auto',
                      mb: 2,
                      fontSize: 32,
                      bgcolor: selectedUser?.id === user.id 
                        ? 'primary.main' 
                        : getUserAvatarColor(user.id),
                      color: 'white',
                      boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
                    }}
                  >
                    {user.name.charAt(0)}
                  </Avatar>
                  
                  {/* 用户名 */}
                  <Typography 
                    variant="h6" 
                    gutterBottom
                    sx={{ 
                      fontWeight: 600,
                      color: selectedUser?.id === user.id 
                        ? 'primary.dark' 
                        : 'text.primary'
                    }}
                  >
                    {user.name}
                  </Typography>
                  
                  {/* 角色标签 */}
                  <Chip
                    icon={getRoleIcon(user.role)}
                    label={getRoleName(user.role)}
                    color={getRoleColor(user.role)}
                    variant={selectedUser?.id === user.id ? 'filled' : 'outlined'}
                    size="small"
                    sx={{ mb: 2 }}
                  />
                  
                  {/* 用户信息 */}
                  <Box sx={{ mt: 2 }}>
                    <Typography variant="body2" color="text.secondary">
                      📧 {user.email}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      📱 {user.phone}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
        <Divider sx={{ my: 4 }} />

        {/* 确认按钮 */}
        <Box textAlign="center">
          <Button
            variant="contained"
            size="large"
            onClick={handleConfirmUser}
            disabled={!selectedUser}
            sx={{
              minWidth: 200,
              py: 1.5,
              fontSize: '1.1rem',
              fontWeight: 600,
              borderRadius: 3,
              boxShadow: '0 4px 15px rgba(76, 175, 80, 0.3)',
              '&:hover': {
                boxShadow: '0 6px 20px rgba(76, 175, 80, 0.4)',
                transform: 'translateY(-2px)',
              },
              '&:disabled': {
                opacity: 0.5,
                transform: 'none',
                boxShadow: 'none',
              },
            }}
          >
            {selectedUser ? `确认选择 ${selectedUser.name}` : '请先选择角色'}
          </Button>
          
          {selectedUser && (
            <Typography 
              variant="body2" 
              color="text.secondary" 
              sx={{ mt: 2 }}
            >
              💾 您的选择将保存在本地，下次打开时自动使用
            </Typography>
          )}
        </Box>

        {/* 编辑用户姓名对话框 */}
        <Dialog 
          open={editDialogOpen} 
          onClose={handleCancelEdit}
          maxWidth="sm"
          fullWidth
        >
          <DialogTitle sx={{ 
            textAlign: 'center',
            bgcolor: 'primary.main',
            color: 'white',
            fontWeight: 'bold'
          }}>
            ✏️ 编辑用户姓名
          </DialogTitle>
          <DialogContent sx={{ pt: 3 }}>
            <Box sx={{ textAlign: 'center', mb: 3 }}>
              {editingUser && (
                <Avatar
                  sx={{
                    width: 60,
                    height: 60,
                    mx: 'auto',
                    mb: 2,
                    bgcolor: getUserAvatarColor(editingUser.id),
                    fontSize: 24,
                  }}
                >
                  {editedName.charAt(0) || editingUser.name.charAt(0)}
                </Avatar>
              )}
              <Typography variant="body2" color="text.secondary">
                请输入新的姓名，修改将立即保存
              </Typography>
            </Box>
            <TextField
              autoFocus
              fullWidth
              label="用户姓名"
              value={editedName}
              onChange={(e) => setEditedName(e.target.value)}
              variant="outlined"
              placeholder="请输入姓名"
              sx={{ mb: 2 }}
            />
          </DialogContent>
          <DialogActions sx={{ p: 3, justifyContent: 'center', gap: 2 }}>
            <Button 
              onClick={handleCancelEdit}
              variant="outlined"
              sx={{ minWidth: 100 }}
            >
              取消
            </Button>
            <Button 
              onClick={handleSaveUserName}
              variant="contained"
              disabled={!editedName.trim()}
              startIcon={<SaveIcon />}
              sx={{ minWidth: 100 }}
            >
              保存
            </Button>
          </DialogActions>
        </Dialog>
      </Container>
    </Box>
  );
}
