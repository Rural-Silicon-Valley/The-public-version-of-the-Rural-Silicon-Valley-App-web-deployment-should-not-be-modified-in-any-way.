import React, { useState } from 'react';
import {
  Box,
  Typography,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  Avatar,
  IconButton,
  Fab,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Tab,
  Tabs,
  Paper,
  Card,
  CardContent,
  Stack,
  Chip,
  MenuItem,
  Grid,
} from '@mui/material';
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Favorite as FavoriteIcon,
  People as PeopleIcon,
} from '@mui/icons-material';
import PageLayout from '../components/PageLayout';
import { useApp } from '../context/AppContext';

// 生成头像颜色
const getAvatarColor = (name: string) => {
  const colors = [
    '#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5',
    '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4caf50',
    '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107', '#ff9800',
    '#ff5722',
  ];
  let hash = 0;
  for (let i = 0; i < name.length; i++) {
    hash = name.charCodeAt(i) + ((hash << 5) - hash);
  }
  hash = Math.abs(hash);
  return colors[hash % colors.length];
};

interface Relationship {
  id: string;
  person1: {
    id: string;
    name: string;
  };
  person2: {
    id: string;
    name: string;
  };
  status: string;
  startDate: string;
  description: string;
}

const RELATIONSHIP_STATUSES = [
  '恋爱中',
  '已订婚',
  '已结婚',
  '热恋期',
  '甜蜜期'
];

const FamilyPage = () => {
  const { state } = useApp();
  const [tabValue, setTabValue] = useState(0);

  // 家庭成员相关状态
  const [memberDialogOpen, setMemberDialogOpen] = useState(false);
  const [newMemberName, setNewMemberName] = useState('');
  
  // 恋人关系相关状态
  const [relationships, setRelationships] = useState<Relationship[]>([]);
  const [relationshipDialogOpen, setRelationshipDialogOpen] = useState(false);
  const [editingRelationship, setEditingRelationship] = useState<Relationship | null>(null);
  const [relationshipFormData, setRelationshipFormData] = useState<Omit<Relationship, 'id'>>({
    person1: { id: '', name: '' },
    person2: { id: '', name: '' },
    status: RELATIONSHIP_STATUSES[0],
    startDate: new Date().toISOString().split('T')[0],
    description: ''
  });

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const handleAddMember = () => {
    if (newMemberName.trim()) {
      // TODO: 实现添加成员的功能
      setNewMemberName('');
      setMemberDialogOpen(false);
    }
  };

  const handleOpenRelationshipDialog = (relationship?: Relationship) => {
    if (relationship) {
      setEditingRelationship(relationship);
      setRelationshipFormData(relationship);
    } else {
      setEditingRelationship(null);
      setRelationshipFormData({
        person1: { id: '', name: '' },
        person2: { id: '', name: '' },
        status: RELATIONSHIP_STATUSES[0],
        startDate: new Date().toISOString().split('T')[0],
        description: ''
      });
    }
    setRelationshipDialogOpen(true);
  };

  const handleCloseRelationshipDialog = () => {
    setRelationshipDialogOpen(false);
    setEditingRelationship(null);
  };

  const handleSaveRelationship = () => {
    if (editingRelationship) {
      setRelationships(relationships.map(rel =>
        rel.id === editingRelationship.id
          ? { ...relationshipFormData, id: editingRelationship.id }
          : rel
      ));
    } else {
      const newRelationship = {
        ...relationshipFormData,
        id: Date.now().toString(),
      };
      setRelationships([...relationships, newRelationship]);
    }
    handleCloseRelationshipDialog();
  };

  return (
    <PageLayout>
      <Box sx={{ p: 2 }}>
        <Paper sx={{ mb: 2 }}>
          <Tabs
            value={tabValue}
            onChange={handleTabChange}
            variant="fullWidth"
            textColor="primary"
            indicatorColor="primary"
            sx={{
              '& .MuiTab-root': {
                minHeight: '48px',
              }
            }}
          >
            <Tab 
              icon={<PeopleIcon sx={{ mr: 1 }} />}
              label="家庭成员" 
              iconPosition="start"
            />
            <Tab
              icon={<FavoriteIcon sx={{ mr: 1, color: '#e91e63' }} />}
              label="硅谷恋人"
              iconPosition="start"
              sx={{
                color: '#e91e63',
                '&.Mui-selected': {
                  color: '#e91e63'
                }
              }}
            />
          </Tabs>
        </Paper>

        {tabValue === 0 ? (
          <>
            <Typography variant="h5" gutterBottom sx={{ mb: 3 }}>
              硅谷家庭成员
            </Typography>

            <List>
              {state.users?.map((user) => (
                <ListItem
                  key={user.id}
                  secondaryAction={
                    <Box>
                      <IconButton edge="end" aria-label="edit">
                        <EditIcon />
                      </IconButton>
                      <IconButton edge="end" aria-label="delete">
                        <DeleteIcon />
                      </IconButton>
                    </Box>
                  }
                >
                  <ListItemAvatar>
                    <Avatar
                      sx={{
                        bgcolor: getAvatarColor(user.name),
                        width: 40,
                        height: 40
                      }}
                    >
                      {user.name[0]}
                    </Avatar>
                  </ListItemAvatar>
                  <ListItemText
                    primary={user.name}
                    secondary={user.role === 'admin' ? '管理员' : '成员'}
                  />
                </ListItem>
              ))}
            </List>

            {/* 添加成员按钮 */}
            <Fab
              color="primary"
              aria-label="add"
              sx={{
                position: 'fixed',
                bottom: 80,
                right: 16,
              }}
              onClick={() => setMemberDialogOpen(true)}
            >
              <AddIcon />
            </Fab>

            {/* 添加成员对话框 */}
            <Dialog open={memberDialogOpen} onClose={() => setMemberDialogOpen(false)}>
              <DialogTitle>添加新成员</DialogTitle>
              <DialogContent>
                <TextField
                  autoFocus
                  margin="dense"
                  label="成员姓名"
                  fullWidth
                  value={newMemberName}
                  onChange={(e) => setNewMemberName(e.target.value)}
                />
              </DialogContent>
              <DialogActions>
                <Button onClick={() => setMemberDialogOpen(false)}>取消</Button>
                <Button onClick={handleAddMember} variant="contained" color="primary">
                  添加
                </Button>
              </DialogActions>
            </Dialog>
          </>
        ) : (
          <>
            <Typography variant="h5" gutterBottom sx={{ 
              mb: 3,
              display: 'flex',
              alignItems: 'center',
              color: '#e91e63'
            }}>
              <FavoriteIcon sx={{ mr: 1 }} /> 硅谷恋人
            </Typography>

            <Grid container spacing={2}>
              {relationships.map((relation) => (
                <Grid item xs={12} key={relation.id}>
                  <Card sx={{ 
                    bgcolor: 'rgba(233, 30, 99, 0.05)',
                    borderRadius: 2,
                    position: 'relative',
                    overflow: 'visible'
                  }}>
                    <CardContent>
                      <Stack
                        direction="row"
                        spacing={2}
                        alignItems="center"
                        justifyContent="center"
                        position="relative"
                      >
                        <Avatar
                          sx={{
                            bgcolor: getAvatarColor(relation.person1.name),
                            width: 56,
                            height: 56
                          }}
                        >
                          {relation.person1.name[0]}
                        </Avatar>
                        
                        <FavoriteIcon 
                          sx={{ 
                            color: '#e91e63',
                            animation: 'pulse 1.5s infinite',
                            '@keyframes pulse': {
                              '0%': { transform: 'scale(1)' },
                              '50%': { transform: 'scale(1.2)' },
                              '100%': { transform: 'scale(1)' },
                            }
                          }} 
                        />
                        
                        <Avatar
                          sx={{
                            bgcolor: getAvatarColor(relation.person2.name),
                            width: 56,
                            height: 56
                          }}
                        >
                          {relation.person2.name[0]}
                        </Avatar>
                      </Stack>

                      <Box sx={{ mt: 2, textAlign: 'center' }}>
                        <Typography variant="body1" gutterBottom>
                          {relation.person1.name} ♥ {relation.person2.name}
                        </Typography>
                        <Chip 
                          label={`${relation.status} · ${relation.startDate}起`}
                          color="primary"
                          size="small"
                          sx={{ 
                            bgcolor: '#e91e63',
                            '& .MuiChip-label': { color: 'white' }
                          }}
                        />
                        {relation.description && (
                          <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                            {relation.description}
                          </Typography>
                        )}
                      </Box>

                      <IconButton 
                        sx={{ position: 'absolute', top: 8, right: 8 }}
                        onClick={() => handleOpenRelationshipDialog(relation)}
                      >
                        <EditIcon />
                      </IconButton>
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>

            {/* 添加恋爱关系按钮 */}
            <Fab
              color="secondary"
              aria-label="添加恋爱关系"
              sx={{
                position: 'fixed',
                bottom: 80,
                right: 16,
              }}
              onClick={() => handleOpenRelationshipDialog()}
            >
              <AddIcon />
            </Fab>

            {/* 添加/编辑恋爱关系对话框 */}
            <Dialog 
              open={relationshipDialogOpen} 
              onClose={handleCloseRelationshipDialog}
              maxWidth="sm"
              fullWidth
            >
              <DialogTitle sx={{ color: '#e91e63' }}>
                <FavoriteIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                {editingRelationship ? '编辑恋爱关系' : '添加恋爱关系'}
              </DialogTitle>
              <DialogContent>
                <Box sx={{ mt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>
                  <TextField
                    select
                    label="成员1"
                    value={relationshipFormData.person1.id}
                    onChange={(e) => {
                      const selectedUser = state.users?.find(u => u.id === e.target.value);
                      setRelationshipFormData(prev => ({
                        ...prev,
                        person1: {
                          id: selectedUser?.id || '',
                          name: selectedUser?.name || ''
                        }
                      }));
                    }}
                    fullWidth
                  >
                    {state.users?.map((user) => (
                      <MenuItem key={user.id} value={user.id}>
                        {user.name}
                      </MenuItem>
                    ))}
                  </TextField>

                  <TextField
                    select
                    label="关系状态"
                    value={relationshipFormData.status}
                    onChange={(e) => setRelationshipFormData(prev => ({
                      ...prev,
                      status: e.target.value
                    }))}
                    fullWidth
                  >
                    {RELATIONSHIP_STATUSES.map((status) => (
                      <MenuItem key={status} value={status}>
                        {status}
                      </MenuItem>
                    ))}
                  </TextField>

                  <TextField
                    select
                    label="成员2"
                    value={relationshipFormData.person2.id}
                    onChange={(e) => {
                      const selectedUser = state.users?.find(u => u.id === e.target.value);
                      setRelationshipFormData(prev => ({
                        ...prev,
                        person2: {
                          id: selectedUser?.id || '',
                          name: selectedUser?.name || ''
                        }
                      }));
                    }}
                    fullWidth
                  >
                    {state.users?.filter(u => u.id !== relationshipFormData.person1.id).map((user) => (
                      <MenuItem key={user.id} value={user.id}>
                        {user.name}
                      </MenuItem>
                    ))}
                  </TextField>

                  <TextField
                    label="开始日期"
                    type="date"
                    value={relationshipFormData.startDate}
                    onChange={(e) => setRelationshipFormData(prev => ({
                      ...prev,
                      startDate: e.target.value
                    }))}
                    fullWidth
                    InputLabelProps={{
                      shrink: true,
                    }}
                  />

                  <TextField
                    label="关系描述"
                    multiline
                    rows={4}
                    value={relationshipFormData.description}
                    onChange={(e) => setRelationshipFormData(prev => ({
                      ...prev,
                      description: e.target.value
                    }))}
                    fullWidth
                    placeholder="请描述一下这段关系..."
                  />
                </Box>
              </DialogContent>
              <DialogActions>
                <Button onClick={handleCloseRelationshipDialog}>取消</Button>
                <Button
                  onClick={handleSaveRelationship}
                  variant="contained"
                  color="secondary"
                  disabled={!relationshipFormData.person1.id || !relationshipFormData.person2.id}
                >
                  {editingRelationship ? '保存' : '创建'}
                </Button>
              </DialogActions>
            </Dialog>
          </>
        )}
      </Box>
    </PageLayout>
  );
};
